// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/message/stateRoot.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/message/stateRoot.go -destination=./mock/stateRootMessage.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	api "github.com/attestantio/go-eth2-client/api"
	spec "github.com/attestantio/go-eth2-client/spec"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockFetcher is a mock of BlockFetcher interface.
type MockBlockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockBlockFetcherMockRecorder
}

// MockBlockFetcherMockRecorder is the mock recorder for MockBlockFetcher.
type MockBlockFetcherMockRecorder struct {
	mock *MockBlockFetcher
}

// NewMockBlockFetcher creates a new mock instance.
func NewMockBlockFetcher(ctrl *gomock.Controller) *MockBlockFetcher {
	mock := &MockBlockFetcher{ctrl: ctrl}
	mock.recorder = &MockBlockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockFetcher) EXPECT() *MockBlockFetcherMockRecorder {
	return m.recorder
}

// SignedBeaconBlock mocks base method.
func (m *MockBlockFetcher) SignedBeaconBlock(ctx context.Context, opts *api.SignedBeaconBlockOpts) (*api.Response[*spec.VersionedSignedBeaconBlock], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedBeaconBlock", ctx, opts)
	ret0, _ := ret[0].(*api.Response[*spec.VersionedSignedBeaconBlock])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignedBeaconBlock indicates an expected call of SignedBeaconBlock.
func (mr *MockBlockFetcherMockRecorder) SignedBeaconBlock(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedBeaconBlock", reflect.TypeOf((*MockBlockFetcher)(nil).SignedBeaconBlock), ctx, opts)
}

// MockBlockStorer is a mock of BlockStorer interface.
type MockBlockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStorerMockRecorder
}

// MockBlockStorerMockRecorder is the mock recorder for MockBlockStorer.
type MockBlockStorerMockRecorder struct {
	mock *MockBlockStorer
}

// NewMockBlockStorer creates a new mock instance.
func NewMockBlockStorer(ctrl *gomock.Controller) *MockBlockStorer {
	mock := &MockBlockStorer{ctrl: ctrl}
	mock.recorder = &MockBlockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStorer) EXPECT() *MockBlockStorerMockRecorder {
	return m.recorder
}

// LatestBlock mocks base method.
func (m *MockBlockStorer) LatestBlock(sourceDomainID, destinationDomainID uint8) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlock", sourceDomainID, destinationDomainID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestBlock indicates an expected call of LatestBlock.
func (mr *MockBlockStorerMockRecorder) LatestBlock(sourceDomainID, destinationDomainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlock", reflect.TypeOf((*MockBlockStorer)(nil).LatestBlock), sourceDomainID, destinationDomainID)
}

// StoreBlock mocks base method.
func (m *MockBlockStorer) StoreBlock(sourceDomainID, destinationDomainID uint8, blockNumber *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBlock", sourceDomainID, destinationDomainID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBlock indicates an expected call of StoreBlock.
func (mr *MockBlockStorerMockRecorder) StoreBlock(sourceDomainID, destinationDomainID, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBlock", reflect.TypeOf((*MockBlockStorer)(nil).StoreBlock), sourceDomainID, destinationDomainID, blockNumber)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CallContext mocks base method.
func (m *MockClient) CallContext(ctx context.Context, target any, rpcMethod string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, target, rpcMethod}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext.
func (mr *MockClientMockRecorder) CallContext(ctx, target, rpcMethod any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, target, rpcMethod}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockClient)(nil).CallContext), varargs...)
}

// FetchEventLogs mocks base method.
func (m *MockClient) FetchEventLogs(ctx context.Context, contractAddress common.Address, event string, startBlock, endBlock *big.Int) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventLogs", ctx, contractAddress, event, startBlock, endBlock)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEventLogs indicates an expected call of FetchEventLogs.
func (mr *MockClientMockRecorder) FetchEventLogs(ctx, contractAddress, event, startBlock, endBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventLogs", reflect.TypeOf((*MockClient)(nil).FetchEventLogs), ctx, contractAddress, event, startBlock, endBlock)
}
