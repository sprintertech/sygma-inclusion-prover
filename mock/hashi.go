// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sygmaprotocol/sygma-inclusion-prover/chains/evm/listener/handlers (interfaces: ReceiptProver,RootProver)
//
// Generated by this command:
//
//	mockgen -destination=./mock/hashi.go -package mock github.com/sygmaprotocol/sygma-inclusion-prover/chains/evm/listener/handlers ReceiptProver,RootProver
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockReceiptProver is a mock of ReceiptProver interface.
type MockReceiptProver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptProverMockRecorder
}

// MockReceiptProverMockRecorder is the mock recorder for MockReceiptProver.
type MockReceiptProverMockRecorder struct {
	mock *MockReceiptProver
}

// NewMockReceiptProver creates a new mock instance.
func NewMockReceiptProver(ctrl *gomock.Controller) *MockReceiptProver {
	mock := &MockReceiptProver{ctrl: ctrl}
	mock.recorder = &MockReceiptProverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptProver) EXPECT() *MockReceiptProverMockRecorder {
	return m.recorder
}

// ReceiptProof mocks base method.
func (m *MockReceiptProver) ReceiptProof(arg0 common.Hash) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiptProof", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiptProof indicates an expected call of ReceiptProof.
func (mr *MockReceiptProverMockRecorder) ReceiptProof(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiptProof", reflect.TypeOf((*MockReceiptProver)(nil).ReceiptProof), arg0)
}

// MockRootProver is a mock of RootProver interface.
type MockRootProver struct {
	ctrl     *gomock.Controller
	recorder *MockRootProverMockRecorder
}

// MockRootProverMockRecorder is the mock recorder for MockRootProver.
type MockRootProverMockRecorder struct {
	mock *MockRootProver
}

// NewMockRootProver creates a new mock instance.
func NewMockRootProver(ctrl *gomock.Controller) *MockRootProver {
	mock := &MockRootProver{ctrl: ctrl}
	mock.recorder = &MockRootProverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootProver) EXPECT() *MockRootProverMockRecorder {
	return m.recorder
}

// ReceiptsRootProof mocks base method.
func (m *MockRootProver) ReceiptsRootProof(arg0 context.Context, arg1, arg2 *big.Int) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiptsRootProof", arg0, arg1, arg2)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiptsRootProof indicates an expected call of ReceiptsRootProof.
func (mr *MockRootProverMockRecorder) ReceiptsRootProof(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiptsRootProof", reflect.TypeOf((*MockRootProver)(nil).ReceiptsRootProof), arg0, arg1, arg2)
}
