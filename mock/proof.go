// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/proof/receipt.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/proof/receipt.go -destination=./mock/proof.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionFetcher is a mock of TransactionFetcher interface.
type MockTransactionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionFetcherMockRecorder
}

// MockTransactionFetcherMockRecorder is the mock recorder for MockTransactionFetcher.
type MockTransactionFetcherMockRecorder struct {
	mock *MockTransactionFetcher
}

// NewMockTransactionFetcher creates a new mock instance.
func NewMockTransactionFetcher(ctrl *gomock.Controller) *MockTransactionFetcher {
	mock := &MockTransactionFetcher{ctrl: ctrl}
	mock.recorder = &MockTransactionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionFetcher) EXPECT() *MockTransactionFetcherMockRecorder {
	return m.recorder
}

// BlockByHash mocks base method.
func (m *MockTransactionFetcher) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, hash)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash.
func (mr *MockTransactionFetcherMockRecorder) BlockByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockTransactionFetcher)(nil).BlockByHash), ctx, hash)
}

// TransactionReceipt mocks base method.
func (m *MockTransactionFetcher) TransactionReceipt(ctx context.Context, txHash common.Hash) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionReceipt", ctx, txHash)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionReceipt indicates an expected call of TransactionReceipt.
func (mr *MockTransactionFetcherMockRecorder) TransactionReceipt(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionReceipt", reflect.TypeOf((*MockTransactionFetcher)(nil).TransactionReceipt), ctx, txHash)
}
